#!/usr/bin/env python3

# Licensed Materials - Property of IBM
# 57XX-XXX
# (c) Copyright IBM Corp. 2021

import argparse
import os

from scripts import init_project
from scripts.build import BuildEnv
from scripts.const import BOB_PATH
from scripts.utils import Colors, colored, get_compile_targets_from_filenames

__version__ = "2.2.9"

def cli():
    """
    makei program entry
    """
    parser = argparse.ArgumentParser(prog='makei')
    subparsers = parser.add_subparsers(
        title='These are common makei commands',
        metavar='command')

    add_init_parser(subparsers)
    add_info_parser(subparsers)
    add_compile_parser(subparsers)
    add_build_parser(subparsers)

    parser.add_argument(
        '-v', '--version',
        help="print version information and exit",
        action='store_true'
    )

    args = parser.parse_args()
    if args.version:
        print(f"Bob version {__version__}");
    elif hasattr(args, 'handle'):
        args.handle(args)
    else:
        parser.print_help()


def add_build_parser(subparsers):
    build_parser = subparsers.add_parser(
        'build',
        aliases=['b'],
        help='build the whole project',
    )
    build_target_group = build_parser.add_mutually_exclusive_group()
    build_target_group.add_argument(
        '-t',
        '--target',
        help='target to be built',
        metavar='<target>'
    )
    build_target_group.add_argument(
        '-d',
        '--subdir',
        help='subdirtory to be built',
        metavar='<subdir>'
    )
    build_parser.add_argument(
        '-o',
        '--make-options',
        help='options to pass to make',
        metavar='<options>',
    )
    build_parser.add_argument(
        '--bob-path',
        help='path to the bob directory',
        metavar='<path>',
    )
    build_parser.add_argument(
        '-e',
        '--env',
        help='override environment variables',
        metavar='<var>=<value>',
        action='append'
    )
    build_parser.set_defaults(handle=handle_build)


def add_compile_parser(subparsers):
    compile_parser = subparsers.add_parser(
        'compile',
        aliases=['c'],
        help='compile a single file')
    compile_target_group = compile_parser.add_mutually_exclusive_group(required=True)
    compile_target_group.add_argument(
        '-f',
        '--file',
        help='file to compile',
        metavar='<filename>')
    compile_target_group.add_argument(
        '--files',
        help='files to compile',
        metavar='<filepaths>')
    compile_parser.add_argument(
        '-o',
        '--make-options',
        help='options to pass to make',
        metavar='<options>',
    )
    compile_parser.add_argument(
        '-e',
        '--env',
        help='override environment variables',
        metavar='<var>=<value>',
        action='append'
    )
    compile_parser.add_argument(
        '--bob-path',
        help='path to the bob directory',
        metavar='<path>',
    )
    compile_parser.set_defaults(handle=handle_compile)


def add_init_parser(subparsers):
    init_parser = subparsers.add_parser(
        'init',
        help='set up a new or existing project')

    init_parser.add_argument('-f', '--force',
                             help='force overwrite any existing files',
                             action='store_true')
    init_parser.set_defaults(handle=handle_init)

def add_info_parser(subparsers):
    info_parser = subparsers.add_parser(
        'info',
        help='get information about the current project')

    info_parser.add_argument('-f', '--force',
                             help='force overwrite any existing files',
                             action='store_true')
    info_parser.set_defaults(handle=handle_info)

def handle_init(args):
    """
    Handling the init command
    """
    init_project.init_project(force=args.force)

def handle_info(args):
    """
    Handling the info command
    """
    print("Not implemented!")

def handle_compile(args):
    """
    Processing the compile command
    """
    set_environment_vars(args)
    if args.file:
        filenames = [args.file]
    elif args.files:
        filenames = map(lambda path: os.path.basename(path), args.files.split(':'))
    targets = get_compile_targets_from_filenames(filenames)
    b = BuildEnv(targets, args.make_options, get_override_vars(args))
    b.make()


def handle_build(args):
    """
    Processing the build command
    """
    set_environment_vars(args)
    if args.target:
        target = args.target
    elif args.subdir:
        target = f"dir_{os.path.basename(args.subdir.strip(os.sep))}"
    else:
        target = "all"
    b = BuildEnv([target], args.make_options, get_override_vars(args))
    b.make()

def get_override_vars(args):
    if args.bob_path:
        return {"bob_path" : args.bob_path}
    else:
        return {}

def set_environment_vars(args):
    if "env" in args and args.env:
        for e in args.env:
            kv = e.split("=")
            if len(kv) != 2:
                print(colored(f"invalid format: {e}", Colors.FAIL))
                exit(1)
            k, v = kv[0], kv[1]
            os.environ[k] = v
            print(colored(f"Set variable <{k}> to '{v}'", Colors.OKBLUE))


if __name__ == '__main__':
    cli()
