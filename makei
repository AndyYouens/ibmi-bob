#!/usr/bin/env python3

# Licensed Materials - Property of IBM
# 57XX-XXX
# (c) Copyright IBM Corp. 2021

import argparse
import os
from pathlib import Path

from scripts import init_project
from scripts.build import BuildEnv
from scripts.utils import Colors, colored, get_compile_target_from_filename, run_command


def cli():
    """
    makei program entry
    """
    parser = argparse.ArgumentParser(prog='makei')
    subparsers = parser.add_subparsers(
        title='These are common makei commands',
        metavar='command')

    add_init_parser(subparsers)
    add_compile_parser(subparsers)
    add_build_parser(subparsers)

    args = parser.parse_args()
    if hasattr(args, 'handle'):
        args.handle(args)
    else:
        parser.print_help()


def add_build_parser(subparsers):
    build_parser = subparsers.add_parser(
        'build',
        aliases=['b'],
        help='build the whole project',
    )
    build_target_group = build_parser.add_mutually_exclusive_group()
    build_target_group.add_argument(
        '-t',
        '--target',
        help='target to be built',
        metavar='<target>'
    )
    build_target_group.add_argument(
        '-d',
        '--subdir',
        help='subdirtory to be built',
        metavar='<subdir>'
    )
    build_parser.add_argument(
        '-o',
        '--make-options',
        help='options to pass to make',
        metavar='<options>',
    )
    build_parser.set_defaults(handle=handle_build)


def add_compile_parser(subparsers):
    compile_parser = subparsers.add_parser(
        'compile',
        aliases=['c'],
        help='compile a single file')
    compile_parser.add_argument(
        '-f',
        '--file',
        help='file to compile',
        metavar='<filename>',
        required=True)
    compile_parser.add_argument(
        '-o',
        '--make-options',
        help='options to pass to make',
        metavar='<options>',
    )
    compile_parser.set_defaults(handle=handle_compile)


def add_init_parser(subparsers):
    init_parser = subparsers.add_parser(
        'init',
        help='set up a new or existing project')

    init_parser.add_argument('-f', '--force',
                             help='force overwrite any existing files',
                             action='store_true')
    init_parser.set_defaults(handle=handle_init)


def handle_init(args):
    """
    Handling the init command
    """
    init_project.init_project(force=args.force)


def handle_compile(args):
    """
    Processing the compile command
    """
    target = get_compile_target_from_filename(args.file)
    b = BuildEnv(''.join(target), make_options=args.make_options)
    run_command(b.generate_make_cmd())


def handle_build(args):
    """
    Processing the build command
    """
    if args.target:
        target = args.target
    elif args.subdir:
        target = f"dir_{os.path.basename(args.subdir.strip(os.sep))}"
    else:
        target = "all"
    b = BuildEnv(''.join(target), make_options=args.make_options)
    run_command(b.generate_make_cmd())


if __name__ == '__main__':
    cli()
