#!/usr/bin/bash

# Scan through current directory of BLDOPT files and extract commands and parameters.
#
# Processing
# o Read through each ADM BLDOPT file
# o Remove comments
# o Reformat build commands to take up one line each
# o For each object and command type, remove all compile parameters that are duplicates of our defaults for that object and type.
# o If any non-default compile parameters remain, output them one at a time to the output file, like "SO1001.PGM: private TGTRLS = $target_release"
# o Output object dependencies based on 'SRCMBR', 'MODULE' and 'BNDSRVPGM' parameters, like "SEGDES.1.PGM: SEGDES.1.MODULE SEGDEF_S.SRVPGM SEGACT_S.SRVPGM"
#   Don't forget binder source, too.

# Global default values
DFT_AUT='AUT(\*EXCLUDE)'
DFT_TGTRLS='TGTRLS(V5R1M0)'
DFT_USRPRF='USRPRF(\*USER)'

trim() {
    local var="$*"
    var="${var#"${var%%[![:space:]]*}"}"   # remove leading whitespace characters
    var="${var%"${var##*[![:space:]]}"}"   # remove trailing whitespace characters
    echo -n "$var"
}

# The `process_XXX` functions remove any compile parameters that match our defaults for that object type and
# then output the remainder to a file.
# $1 = object name
# $2 = compile parameters
process_CRTCMD() {
	local dft1="VLDCKR(\*NONE)"
	local dft2="PMTFILE(\*NONE)"
	local object=$1
	local command=$2
	echo "CRTCMD: command=$2"
	
	command=${command/ $dft1/}
	command=${command/ $dft2/}
	echo $object
	echo "**Original command: $2"
	echo "**New command: $command"

	# remove these dft strings from $2 and output >> to file.
}

files=( "*" )
for file in $files; do
	base=$(basename $file .CLP)
	sed -e 's/\/\*.*\*\///g' -e 's/ *$//' -e :a -e '/+ *$/N; s/ *+ *\n */ /; ta' -e '/^$/d' -e 's/^ *//' -e 's/ *) */) /g' -e 's/^/'$base': /' \
        -e 's/&O\///' -e 's/\&ZE/'$base'/g' -e 's/SRCMBR(&[^)]*) *//' -e 's/SRCFILE(&[^)]*) *//' \
		-e 's/REPLACE(\*YES) *//' -e 's/DBGVIEW([^)]*) *//' -e 's/'$DFT_AUT' *//' -e 's/'$DFT_TGTRLS' *//' -e 's/'$DFT_USRPRF' *//' \
	$file | \
	sed -e 's/ *\/\*.*\*\/ *//g' | \
	{
	while IFS='' read -r line || [[ -n "$line" ]]; do
		object=$(trim ${line/:*/})
		temp=$(trim ${line/${object}:/})
		command=$(trim ${temp/ */})
		parms=$(trim ${temp/$command/})

		case "$command" in
		CRTCMD)		process_CRTCMD $object "$parms"
					;;
		CRTCMOD)	process_CRTCMOD $object $parms
					;;
		CRTRPGMOD)	process_CRTRPGMOD $object $parms
					;;
		CRTSQLRPGI)	process_CRTSQLRPGI $object $parms
					;;
		CRTBNDCL)	process_CRTBNDCL $object $parms
					;;
		CRTSRVPGM)	process_CRTSRVPGM $object $parms
					;;
		CRTPGM)		process_CRTPGM $object $parms
					;;
		*)			echo "*** Unknown command $command found for object $object"
					;;
		esac
	done
	}
done