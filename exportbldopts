#!/usr/bin/bash

# Scan through current directory of BLDOPT files and extract commands and parameters.
#
# Processing
# o Read through each ADM BLDOPT file
# o Remove comments
# o Reformat build commands to take up one line each
# o For each object and command type, remove all compile parameters that are duplicates of our defaults for that object and type.
# o If any non-default compile parameters remain, output them one at a time to the output file, like "SO1001.PGM: private TGTRLS = $target_release"
# o Output object dependencies based on 'SRCMBR', 'MODULE' and 'BNDSRVPGM' parameters, like "SEGDES.1.PGM: SEGDES.1.MODULE SEGDEF_S.SRVPGM SEGACT_S.SRVPGM"
#   Don't forget binder source, too.

# Global default values
DFT_AUT='AUT(\*EXCLUDE)'
DFT_TGTRLS='TGTRLS(V5R1M0)'
DFT_USRPRF='USRPRF(\*USER)'

# Default values for each object type
CMD_DFT=( 'VLDCKR(\*NONE)' 'PMTFILE(\*NONE)' 'CMD(CHKIDX)' )
CMOD_DFT=( 'TERASPACE(\*YES \*NOTSIFC)' 'STGMDL(\*INHERIT)' 'SYSIFCOPT(\*IFSIO)' 'OPTION(\*SYSINCPATH \*EVENTF \*SHOWUSR \*XREF \*AGR \*STRUCREF)' )
RPGMOD_DFT=()
SQLRPGI_DFT=()
BNDCL_DFT=( 'DFTACTGRP(\*NO)' 'ACTGRP(E_PRODUCT)' )
SRVPGM_DFT=()
PGM_DFT=( 'ACTGRP(E_PRODUCT)' )




trim() {
    local var="$*"
    var="${var#"${var%%[![:space:]]*}"}"   # remove leading whitespace characters
    var="${var%"${var##*[![:space:]]}"}"   # remove trailing whitespace characters
    echo -n "$var"
}

# The `process_XXX` functions remove any compile parameters that match our defaults for that object type and
# then output the remainder to a file.
# $1 = object name
# $2 = compile parameters
process_parms() {
	local object=$1
	shift
	local command=$1
	shift
	local defaults=($@)
	
	commandSave=$command
	echo "Command: x${command}x"
	for parm in "${defaults[@]}"
	do
		command=${command/$parm/}
	done
	
	echo $object
	echo "**Original command: $commandSave"
	echo "**New      command: $command"

	# http://stackoverflow.com/questions/38986668/can-bash-substring-replacement-use-regexs.
}

echo "SQLRPGI_DFT=${#SQLRPGI_DFT}"
files=( "*" )
for file in $files; do
	base=$(basename $file .CLP)
	sed -e 's/\/\*.*\*\///g' -e 's/ *$//' -e :a -e '/+ *$/N; s/ *+ *\n */ /; ta' -e '/^$/d' -e 's/^ *//' -e 's/ *) */) /g' -e 's/^/'$base': /' \
        -e 's/&O\///' -e 's/\&ZE/'$base'/g' -e 's/SRCMBR(&[^)]*) *//' -e 's/SRCFILE(&[^)]*) *//' \
		-e 's/REPLACE(\*YES) *//' -e 's/DBGVIEW([^)]*) *//' -e 's/OUTPUT(\*LIST) *//' -e 's/'$DFT_AUT' *//' -e 's/'$DFT_TGTRLS' *//' -e 's/'$DFT_USRPRF' *//' \
	$file | \
	sed -e 's/ *\/\*.*\*\/ *//g' | \
	{
	while IFS='' read -r line || [[ -n "$line" ]]; do
		object=$(trim ${line/:*/})
		temp=$(trim ${line/${object}:/})
		command=$(trim ${temp/ */})
		parms=$(trim ${temp/$command/})

		case "$command" in
		CRTCMD)		process_parms $object "$parms" ${CMD_DFT[@]}
					;;
		CRTCMOD)	process_parms $object "$parms" ${CMOD_DFT[@]}
					;;
		CRTRPGMOD)	process_parms $object "$parms" ${RPGMOD_DFT[@]}
					;;
		CRTSQLRPGI)	process_parms $object "$parms" ${SQLRPGI_DFT[@]}
					;;
		CRTBNDCL)	process_parms $object "$parms" ${BNDCL_DFT[@]}
					;;
		CRTSRVPGM)	process_parms $object "$parms" ${SRVPGM_DFT[@]}
					;;
		CRTPGM)		process_parms $object "$parms" ${PGM_DFT[@]}
					;;
		*)			echo "*** Unknown command $command found for object $object"
					;;
		esac
	done
	}
done